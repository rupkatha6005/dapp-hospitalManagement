App = {
 webProvider: null,
 contracts: {},
 account: '0x0',


 init: function() {
   return App.initWeb();
 },


 initWeb:function() {
   // if an ethereum provider instance is already provided by metamask
   const provider = window.ethereum
   if( provider ){
     // currently window.web3.currentProvider is deprecated for known security issues.
     // Therefore it is recommended to use window.ethereum instance instead
     App.webProvider = provider;
   }
   else{
     $("#loader-msg").html('No metamask ethereum provider found')
     console.log('No Ethereum provider')
     // specify default instance if no web3 instance provided
     App.webProvider = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
   }

   return App.initContract();
 },



//"Management.json" file typically contains the compiled contract artifacts generated by Truffle 

 initContract: function() {
   $.getJSON("Management.json", function( management ){
     // instantiate a new truffle contract from the artifict
     App.contracts.Management = TruffleContract( management );


     // connect provider to interact with contract
     App.contracts.Management.setProvider( App.webProvider );


     return App.render();
   })
 },

//endering function that updates the user interface based on the initialized contract and its data.

render: async function(){
   let managementInstance;
   const loader = $("#loader");
   const content = $("#content");


   loader.show();
   content.hide();
  
   // load account data
   if (window.ethereum) {
     try {
       // recommended approach to requesting user to connect mmetamask instead of directly getting the accounts
       const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
       App.account = accounts;
       $("#accountAddress").html("Your Account: " + App.account);
     } catch (error) {
       if (error.code === 4001) {
         // User rejected request
         console.warn('user rejected')
       }
       $("#accountAddress").html("Your Account: Not Connected");
       console.error(error);
     }
   }


   //load contract data
   App.contracts.Management.deployed()
   .then( function( instance ){
    managementInstance = instance;
    var deathRate = managementInstance.deathRate();
    var highestDistrict = managementInstance.highestDistrict();
    
    var tableOneTemplate = "<tr><td>" + deathRate + "</td><td>" + highestDistrict + "</td></tr>";
    var tableOneResults = $("#tableOneInfo");
     tableOneResults.empty();
     tableOneResults.append( tableOneTemplate );
     return keyNames;
   }) 
   
   .then( function( keyNames ){

     for (let i = 1; i <= keyNames.length; i++) {
       managementInstance.districtCount( keyNames[i] )
       .then( function( district ){
         var name = keyNames[i];
         var median = district[1];
        
         // render results
         var tableTwoTemplate = "<tr><td>" + name + "</td><td>" + median + "</td></tr>"
         tableTwoResults.append( tableTwoTemplate );

     }
   })
   .catch( function( error ){
     console.warn( error )
   });
 },


 // adding user--> name, age, gender,vaccine_status, is_dead, hasCovid, district
 
 addUser: function(){
   let userName = $("#name").val();
   let userAge = $("#age").val();
   let userDistrict = $("#district").val();
   let userGender = $("#gender").val();
   
   App.contracts.Management.deployed()
   .then( function( instance ){
     return instance.addUser( userName, userAge, null, false, false, userDistrict,  { from: App.account[0] } )
   })
   .then( function( result ){
     // wait for user to be added
     console.log({ result })
       // content.hide();
       // loader.show();
       alert("User added successfully")
   })
   .catch( function( err ){
     console.error( err )
   } )
 },
 
 updateVaccine: function(){
   let userId = $("#id").val();
   let vaccine = $("#vaccine").val();
   
   App.contracts.Management.deployed()
   .then( function( instance ){
     return instance.changeVaccine( vaccine, userId,  { from: App.account[0] } )
   })
   .then( function( result ){
     // wait for user to be added
     console.log({ result })
       // content.hide();
       // loader.show();
       alert("User added successfully")
   })
   .catch( function( err ){
     console.error( err )
   } )
  },
  
   updateIsDead: function(){
   let userId = $("#id").val();
   
   App.contracts.Management.deployed()
   .then( function( instance ){
     return instance.changeDeathStatus(userId,  { from: App.account[0] } )
   })
   .then( function( result ){
     // wait for user to be added
     console.log({ result })
       // content.hide();
       // loader.show();
       alert("User added successfully")
   })
   .catch( function( err ){
     console.error( err )
   } )
  },
  
  updateHasCovid: function(){
	let userId = $("#id").val();
   
	   App.contracts.Management.deployed()
	   .then( function( instance ){
	     return instance.changehasCovid(userId,  { from: App.account[0] } )
	   })
	   .then( function( result ){
	     // wait for user to be added
	     console.log({ result })
	       // content.hide();
	       // loader.show();
	       alert("User added successfully")
	   })
	   .catch( function( err ){
	     console.error( err )
	   } )
	  },

};


$(function() {
 $(window).load(function() {
   App.init();
 });
});


